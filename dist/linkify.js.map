{"version":3,"file":"linkify.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,aAAa,wBAAwB;AACrC,WAAW,0BAA0B;AACrC;AACO,qDAAqD;AAC5D,YAAY,uGAAuG,aAAa,IAAI;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B,4BAA4B,KAAK;AACjC;;;;;;;UC1JA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC;AACA;AACA;AACe;AACf;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,eAAe;AAC9B;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAW,6CAA6C,4BAA4B;AACxG;AACA;AACA,SAAS;AACT;AACA","sources":["webpack://LinkifyJS/./src/selectionHandler.ts","webpack://LinkifyJS/./src/tooltip.ts","webpack://LinkifyJS/webpack/bootstrap","webpack://LinkifyJS/webpack/runtime/define property getters","webpack://LinkifyJS/webpack/runtime/hasOwnProperty shorthand","webpack://LinkifyJS/webpack/runtime/make namespace object","webpack://LinkifyJS/./src/index.ts"],"sourcesContent":["/**\r\n * Replaces the selected range with an anchor (<a>) element\r\n * using the provided name and href. Also applies custom attributes from config.\r\n *\r\n * @param {Range} range - The selected text range to replace.\r\n * @param {string} name - The text content to display inside the anchor.\r\n * @param {string} href - The URL to set as the anchor's href.\r\n * @param {LinkifyConfig} config - Optional configuration object that may include\r\n *                                 additional attributes (excluding reserved ones).\r\n */\r\nexport function handleSelection(range, name, href, config) {\r\n    // Create the anchor element\r\n    const a = document.createElement('a');\r\n    a.href = href;\r\n    a.innerText = name;\r\n    // Apply additional custom attributes from config\r\n    for (const [key, value] of Object.entries(config)) {\r\n        // Only apply if key is not one of the known reserved keys\r\n        if (!['tooltip', 'label', 'input', 'submit', 'remove'].includes(key)) {\r\n            a.setAttribute(key, value);\r\n        }\r\n    }\r\n    // Replace the selected content with the anchor\r\n    range.deleteContents();\r\n    range.insertNode(a);\r\n}\r\n","/**\r\n * Tooltip Module for LinkifyJS\r\n * Dynamically renders a tooltip to allow users to link selected text with custom display text and URL.\r\n * Supports optional removal of existing links and customizable styles and class names.\r\n */\r\nimport { handleSelection } from './selectionHandler';\r\n// Default styling for tooltip container\r\nconst tooltipStyles = {\r\n    position: 'fixed',\r\n    padding: '8px',\r\n    background: '#fff',\r\n    border: '1px solid #ccc',\r\n    boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\r\n    zIndex: '9999',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '4px',\r\n    borderRadius: '4px',\r\n    fontFamily: 'Arial',\r\n    pointerEvents: 'auto',\r\n};\r\n// Default styling for input fields\r\nconst inputStyles = {\r\n    padding: '6px 8px',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '4px',\r\n    fontSize: '14px',\r\n    outline: 'none',\r\n};\r\n// Default styling for the submit button\r\nconst submitButtonStyles = {\r\n    padding: '6px 10px',\r\n    background: '#4CAF50',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n};\r\n// Default styling for the remove button\r\nconst removeButtonStyles = {\r\n    padding: '6px 10px',\r\n    background: '#f44336',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n};\r\n// Label styling\r\nconst labelStyles = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    fontSize: '14px',\r\n    fontWeight: '500',\r\n    color: '#333',\r\n    gap: '4px',\r\n    marginBottom: '10px'\r\n};\r\n/**\r\n * Initializes the tooltip for text selection and link insertion.\r\n *\r\n * @param {Range | null} range - The saved text selection range.\r\n * @param {string} selectedText - The actual selected text content.\r\n * @param {LinkifyConfig} config - Configuration object (classNames, placeholders, etc).\r\n * @param {{ x: number, y: number }} position - Mouse position to place the tooltip near.\r\n * @param {HTMLAnchorElement | null} [existingLink] - If editing an existing link, pass the anchor element.\r\n */\r\nexport function initTooltip(range, selectedText, config = {}, position, existingLink) {\r\n    const { labelText = 'Text', labelURL = 'URL', placeholderText = 'Text', placeholderURL = 'URL', classNames = {}, styles = {}, } = config;\r\n    if (!range)\r\n        return;\r\n    // Remove existing tooltip if one is already open\r\n    const existingTooltip = document.querySelector('.linkify-tooltip');\r\n    if (existingTooltip)\r\n        existingTooltip.remove();\r\n    // Create tooltip container\r\n    const tooltip = document.createElement('div');\r\n    tooltip.className = classNames.tooltip || 'linkify-tooltip';\r\n    tooltip.style.visibility = 'hidden';\r\n    Object.assign(tooltip.style, tooltipStyles, styles.tooltip);\r\n    // === Input for display text ===\r\n    const nameLabel = document.createElement('label');\r\n    nameLabel.className = classNames.label || 'linkify-label';\r\n    nameLabel.textContent = labelText;\r\n    Object.assign(nameLabel.style, labelStyles, styles.label);\r\n    const nameInput = document.createElement('input');\r\n    nameInput.className = classNames.input || 'linkify-input';\r\n    nameInput.placeholder = placeholderText;\r\n    nameInput.value = (existingLink === null || existingLink === void 0 ? void 0 : existingLink.innerText) || selectedText;\r\n    Object.assign(nameInput.style, inputStyles, styles.input);\r\n    nameLabel.appendChild(nameInput);\r\n    // === Input for URL ===\r\n    const urlLabel = document.createElement('label');\r\n    urlLabel.className = classNames.label || 'linkify-label';\r\n    urlLabel.textContent = labelURL;\r\n    Object.assign(urlLabel.style, labelStyles, styles.label);\r\n    const urlInput = document.createElement('input');\r\n    urlInput.className = classNames.input || 'linkify-input';\r\n    urlInput.placeholder = placeholderURL;\r\n    urlInput.value = (existingLink === null || existingLink === void 0 ? void 0 : existingLink.href) || '';\r\n    Object.assign(urlInput.style, inputStyles, styles.input);\r\n    urlLabel.appendChild(urlInput);\r\n    // === Submit button ===\r\n    const submitBtn = document.createElement('button');\r\n    submitBtn.className = classNames.submit || 'linkify-submit';\r\n    submitBtn.innerText = 'Submit';\r\n    submitBtn.onclick = () => {\r\n        const name = nameInput.value;\r\n        const href = urlInput.value;\r\n        if (name && href) {\r\n            handleSelection(range, name, href, config);\r\n            tooltip.remove();\r\n        }\r\n    };\r\n    Object.assign(submitBtn.style, submitButtonStyles, styles.submit);\r\n    // Add all created elements to the tooltip\r\n    tooltip.appendChild(nameLabel);\r\n    tooltip.appendChild(urlLabel);\r\n    tooltip.appendChild(submitBtn);\r\n    // === Remove link button (if editing existing link) ===\r\n    if (existingLink) {\r\n        const removeBtn = document.createElement('button');\r\n        removeBtn.className = classNames.remove || 'linkify-remove';\r\n        removeBtn.innerText = 'Remove Link';\r\n        removeBtn.onclick = () => {\r\n            var _a;\r\n            const textNode = document.createTextNode(existingLink.innerText);\r\n            (_a = existingLink.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(textNode, existingLink);\r\n            tooltip.remove();\r\n        };\r\n        Object.assign(removeBtn.style, removeButtonStyles, styles.remove);\r\n        tooltip.appendChild(removeBtn);\r\n    }\r\n    // Attach tooltip to the DOM early to get dimensions\r\n    document.body.appendChild(tooltip);\r\n    const tooltipRect = tooltip.getBoundingClientRect();\r\n    tooltip.style.visibility = 'visible';\r\n    // === Positioning Logic ===\r\n    let top = position.y + 8; // below cursor\r\n    let left = position.x;\r\n    // Adjust to top if there's not enough space below\r\n    if (top + tooltipRect.height > window.innerHeight) {\r\n        top = position.y - tooltipRect.height - 8;\r\n    }\r\n    // Prevent overflow on right\r\n    if (left + tooltipRect.width > window.innerWidth) {\r\n        left = window.innerWidth - tooltipRect.width - 8;\r\n    }\r\n    // Minimum padding from edges\r\n    if (left < 8)\r\n        left = 8;\r\n    if (top < 8)\r\n        top = 8;\r\n    tooltip.style.top = `${top}px`;\r\n    tooltip.style.left = `${left}px`;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * LinkifyJS - A JavaScript library for handling inline text linking via tooltip UI.\r\n * Provides a clean interface to transform selected text into a clickable anchor tag with a custom tooltip.\r\n *\r\n * @author Deepansu Mor\r\n * @github https://github.com/deepansumor\r\n */\r\nimport { initTooltip } from './tooltip';\r\n/**\r\n * LinkifyJS class provides a static method to initialize the selection linking behavior\r\n */\r\nexport default class LinkifyJS {\r\n    /**\r\n     * Initializes the LinkifyJS behavior on a given container element.\r\n     *\r\n     * @param {HTMLElement} container - The container to attach selection behavior to.\r\n     * @param {LinkifyConfig} config - Optional configuration object for tooltip styling, text, placeholders, etc.\r\n     */\r\n    static init(container, config = {}) {\r\n        container.addEventListener('mouseup', (e) => {\r\n            const selection = window.getSelection();\r\n            const selectedText = selection === null || selection === void 0 ? void 0 : selection.toString();\r\n            let lastSelectionRange;\r\n            // Save the current selection range if there's a valid text selection\r\n            if (selection && !selection.isCollapsed) {\r\n                const range = selection.getRangeAt(0);\r\n                lastSelectionRange = range.cloneRange();\r\n            }\r\n            else {\r\n                lastSelectionRange = null;\r\n            }\r\n            // Proceed only if some text is selected and container contains it\r\n            if (selectedText && selectedText.trim() !== '') {\r\n                const range = selection === null || selection === void 0 ? void 0 : selection.getRangeAt(0);\r\n                if (range && selection && container.contains(selection.anchorNode)) {\r\n                    let existingLink = null;\r\n                    // Traverse up from the anchor node to check if selection is inside an <a> tag\r\n                    if (selection === null || selection === void 0 ? void 0 : selection.anchorNode) {\r\n                        let node = selection.anchorNode;\r\n                        while (node && node !== container) {\r\n                            if (node.nodeType === 1 && node.tagName === 'A') {\r\n                                existingLink = node;\r\n                                break;\r\n                            }\r\n                            node = node.parentNode;\r\n                        }\r\n                    }\r\n                    // Initialize the tooltip with selected range, mouse position, and existing link if any\r\n                    initTooltip(lastSelectionRange, selectedText, config, { x: e.clientX, y: e.clientY }, existingLink);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}